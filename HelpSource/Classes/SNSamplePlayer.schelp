TITLE:: SNSamplePlayer
summary:: A sample looper, allowing to loop samples in various ways.
categories:: SNSampler
related:: Classes/SNSampler, Classes/AbstractSNSampler, Classes/CVCenter, Overviews/JITLib

DESCRIPTION::
Within its built-in looping modes a SNSamplePlayer lets you loop an array of consecutive buffers in such a way that all buffers are spread in the stereo or multichannel panorama. The built-in looping modes basically provide different ways of sequencing - either as audio grains within a link::Classes/Pbind:: or non-granular within a link::Classes/Pmono:: or link::Classes/Ndef::. All these modes will create different output characteristics. However, to make playing most convenient and flexible, they all make use of the wonderful link::Overviews/JITLib:: library, that allows an extremely flexible way of combining different concepts of sequencing and signal processing.

CLASSMETHODS::

METHOD:: new
Create a new SNSampleLooper instance

ARGUMENT:: name
Optional - a link::Classes/Symbol:: or link::Classes/String::, denoting the name of the new instance. If not given this willdefault to code::\Looper::.

ARGUMENT:: bufLength
Optional - the maximum length of a single loop in seconds. If not given this will default to code::60::. Often you will want to set this to the length of the buffers stored with an link::Classes/SNSampler::.

ARGUMENT:: mode
Optional - a link::Classes/Symbol:: or link::Classes/String::, denoting the mode in which to play the looper. As of currently this may be one of the following:
DEFINITIONLIST::
## code::\grain:: (default) || loops will be created as link::Classes/Synth:: grains in parallel playing link::Classes/Pbind::s within a link::Classes/Ppar::
## code::\mono:: || loops will be created in a continously playing link::Classes/Pmono:: within a link::Classes/Ppar::
## code::\ndef:: || loops will be playing in an link::Classes/Ndef::, using a link::Classes/BufRd::. Looping will be handled by a link::Classes/Phasor::
::

ARGUMENT:: numOutChannels
Optional - a link::Classes/Integer::, denoting the number of output channels. The looped buffers will automatically be spread accross all channels. Spreading the output is handled either by a link::Classes/Splay:: (if code::numOutChannels:: is set to code::2::) or a link::Classes/SplayAz:: ugen (for code::numOutChannels:: set to a value greater than code::2::). If not set this defaults to code::2::.

ARGUMENT:: server
Optional - the link::Classes/Server:: on which to play the looper. If not set this will default to code::Server.default::.

returns:: an SNSamplePlayer instance

METHOD:: all

returns:: an link::Classes/Event::, holding all current SNSamplePlayer instances


INSTANCEMETHODS::

METHOD:: setupPlayer
Set up the SNSamplePlayer before it can actually be played: Add an link::Classes/Array:: of buffers and define a node for an over-all volume control - setting the volume will be handled in a filter synth (more precisely: a link::Reference/NodeProxy_roles##NodeProxy role:: added to the end of an link::Classes/Ndef::). If not given explicitely the volume control will be created with an ID code::1000::.

ARGUMENT:: bufferArray
An link::Classes/Array:: of buffers that will be looped in the instance. Often this will be identical with an array of buffers created when setting up an link::Classes/SNSampler::

ARGUMENT:: volumeControlNode
Optional - an link::Classes/Integer::, denoting the position of the volume control in the chain of synths and filters (defined in an link::Classes/Ndef:: or link::Classes/NodeProxy::).
NOTE:: This ID is not a regular node ID in the server tree!::

METHOD:: initDef
Initialize or switch the mode in which the player will play. Available modes will be the ones described in link::#*new::.

ARGUMENT:: mode
A link::Classes/Symbol:: - either code::\grain::, code::\mono:: or code::\ndef::

ARGUMENT:: bufferArray
Optional - an array of buffers, initialized with link::Classes/Buffer#*allocConsecutive::. NOTE::The number of buffers must be the same as the number of buffers for which the player was initialized!::

METHOD:: play
Start playing the SNSamplePlayer. Internally this will start playing the Ndef that keeps the loopers for all buffers. You may inspect the Ndef using an link::Classes/NdefMixer::.

METHOD:: pause
Pause the player. Internally this will pause the Ndef that keeps the loopers for all buffers.

METHOD:: resume
Resume a paused player. Internally this will resume the Ndef that keeps the loopers for all buffers.

METHOD:: clear
Clear the player. This will clear the loopers emphasis::and:: all effects that have been chained to the output of the player. Once an SNSamplePlayer has been cleared it can not be restarted.

ARGUMENT:: fadeTime
A link::Classes/Float:: or link::Classes/Integer::, determining the fade-out time of the player in seconds.

METHOD:: freeHangingNodes
When using mode code::\grain:: (the default) it may happen under certain circumstances that grains are not freed properly (they remain on the server, consuming memory). In these cases calling this method will clear all nodes and free memory. Though this may have an audible effect new grains should build up automatically and it will often be preferable to have a short moment of silence than running out of memory.

METHOD:: setLoopMaxLength
SNSamplePlayer has originally been designed to be used in combination with link::Classes/SNSampler::, allowing you to record sound sequences up to a specified length on the fly. However, sound sequences won't necessarily fill up a whole buffer which means, when looping over the buffer, silence at the end of the buffer will be part of the loop. This method tells the looper how much of the buffer should be used for looping.

The method especially makes sense in combination with the link::Classes/SNSampler#-doneAction#doneAction:: of an link::Classes/SNSampler::. The code::doneAction:: can be passed a numerical code::index:: (the index of the buffer in the array of consecutive buffers for which the maximum loop length shall be set) and the code::length:: of the loop in seconds.

code::
// ~sampler is an existing instance of an SNSampler
// ~looper is an existing instrance of an SNSamplePlayer
~sampler.doneAction_({ |index, length|
	~looper.setLoopMaxLength(index, length);
});
::

ARGUMENT:: index
An link::Classes/Integer:: or a whole-numbered link::Classes/Float::, denoting the index of the buffer in the array of consecutive buffers.

ARGUMENT:: length
A link::Classes/Float::, denoting the length of the loop in seconds.

SUBSECTION:: Instance variables

METHOD:: debug
If set to code::true:: the player will post information on the just played loops to the console.

ARGUMENT:: bool
A link::Classes/Boolean:: (either code::true:: or code::false::)

METHOD:: numOutChannels
(describe method here)

returns:: (describe returnvalue here)

METHOD:: loopLengths
(describe method here)

returns:: (describe returnvalue here)

METHOD:: name
(describe method here)

returns:: (describe returnvalue here)

METHOD:: bufLength
(describe method here)

returns:: (describe returnvalue here)

METHOD:: server
(describe method here)

returns:: (describe returnvalue here)

METHOD:: looperPlayer
(describe method here)

returns:: (describe returnvalue here)

METHOD:: out
(describe method here)

returns:: (describe returnvalue here)

METHOD:: prSetUpControls
(describe method here)

ARGUMENT:: volumeControl
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: group
(describe method here)

returns:: (describe returnvalue here)

METHOD:: buffers
(describe method here)

returns:: (describe returnvalue here)

METHOD:: init
(describe method here)

ARGUMENT:: server
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: prSetSpecConstraints
(describe method here)

ARGUMENT:: index
(describe argument here)

ARGUMENT:: length
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: mode
(describe method here)

returns:: (describe returnvalue here)

METHOD:: prInitPatternPlayer
(describe method here)

ARGUMENT:: bufferArray
(describe argument here)

returns:: (describe returnvalue here)


EXAMPLES::

code::
(some example code)
::
