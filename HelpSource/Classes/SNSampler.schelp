TITLE:: SNSampler
summary:: A classic sampler that lets you sample sequences of sounds up to a specified length.
categories:: SNSampler
related:: Classes/SNSamplePlayer, Classes/AbstractSNSampler, Classes/CVCenter

DESCRIPTION::
An SNSampler lets you record sequences of sound up to a specified length. When you instantiate a new SNSampler an array of consecutive empty buffers of equal length will be created. The length of these buffers determines how long the sequences emphasis::can:: be. The actual sampling is started be executing the link::#-sample:: method with a boolean argument code::true::. Again executing the same method with an argument code::false::. The length of the recorde sound will be stored in a variable link::#-loopLengths:: which stores the lengths of of all currently recorded sequences in values between code::0:: and code::1:: (code::1:: represents the longest possible sequence).

CLASSMETHODS::

METHOD:: new
Create a new SNSampler instance.

ARGUMENT:: name
Optional - a link::Classes/String:: or a link::Classes/Symbol:: denoting the name for the new instance. If not given this will default to code::\sampler::.

ARGUMENT:: numBuffers
Optional - a link::Classes/Integer:: denoting the number of consecutive buffers to be allocated. If not given this will default to code::5::.

ARGUMENT:: bufLength
Optional - the lengths of the allocated (audio) link::Classes/Buffer::s in seconds. If not given this will default to code::60::.

ARGUMENT:: numChannels
Optional - the number of channels for each buffer. If not given this will default to code::1::.

ARGUMENT:: server
Optional - the link::Classes/Server:: on which to allocate the audio buffers. If not given this buffers will be allocated on code::Server.default::.

ARGUMENT:: touchOSC
Optional - a link::Classes/NetAddr:: under which an installation of the popular TouchOSC OSC controller is running.
NOTE:: The address will be used to send feedback to TouchOSC, so you emphasis::must:: provide the port under which TouchOSC expects to emphasis::receive:: OSC messages!::

ARGUMENT:: touchOSCPanel
Optional - TouchOSC's user interface can be organized in a number of panels. Panels are numbered, biginning from one. This is also reflected in TouchOSC's commandname structure. E.g. code::/1/toggle:: could be a toggle button on TouchOSC's first panel. If not given this will default to code::1::.

returns:: an SNSampler

METHOD:: all

returns:: an link::Classes/Event::, holding all current SNSampler instances.

INSTANCEMETHODS::

METHOD:: setupSampler
Before you can actually use the SNSampler instance you must specify the input bus and (probably) a procedure to be executed when sampling is done. Usually you will want to play the buffer that you've just recorded. This procedure should go into code::doneAction::.

ARGUMENT:: in
An link::Classes/Integer::, denoting the input bus. If not given this will default to code::0::.

ARGUMENT:: doneAction
A link::Classes/Function:: denoting the action that should be taken after sampling has been finished.

METHOD:: setBufnum
Set the link::Classes/Buffer#-bufnum#buffer number:: for the next sample. Incoming sound will be recorded to the buffer denoted by this value. It usually should not be necessary to set the buffer number explicitly - the sampler knows which buffers audio has already been written to and will, as long as empty buffers are still available, automatically choose an empty buffer.

ARGUMENT:: bufnum
An link::Classes/Integer:: denoting the bufnum.

METHOD:: sample
Start or stop sampling. The buffer to which the sampled audio will be written to is either determined by link::#-setBufnum:: or, if that method has not been called in advance, the next buffer number. Sampling will usually start at the lowest buffer number in the array of consecutive buffers that have been allocated in link::#-setupSampler:: or, if link::#-randomBufferSelect:: has been set to code::true:: at a random buffer number.

ARGUMENT:: bool
A link::Classes/Boolean:: determining whether sampling should be started or stopped.

METHOD:: reset
Reset one or all buffers. Recorded audio will be reset to zero, the link::#-loopLengths:: will be reset and, if given, code::doneAction:: will be executed.

ARGUMENT:: index
An link::Classes/Integer::, denoting the buffer number that should be reset.

ARGUMENT:: doneAction
A link::Classes/Function:: that will be executed upon reseting the buffer(s)

SUBSECTION:: Instance variables - getters and setters

METHOD:: doneAction
An action to be executed immediately after recording audio has been finished. This could e.g. be some synth that plays back the recorded audio but can be anything. The code::doneAction:: must be given as a link::Classes/Function::.

METHOD:: touchOSC
Set the link::Classes/NetAddr:: under which an installation of TouchOSC will be communicating with the sampler.
NOTE:: The port given in the NetAddr will be the port under which TouchOSC is emphasis::listening:: to OSC messages coming from SuperCollider!::

METHOD:: touchOSCPanel
TouchOSC's graphical user interface is typically organized in panels. A toggle button on the first panel may be addressed through the following command name: code::/1/toggle1::. The code::touchOSCPanel:: should allow you to specify the panel under which buttons connected to the SNSampler live.

METHOD:: randomBufferSelect
Determine whether the next buffer for audio recording should be selected randomly. Even if this is set to code::true:: SNSampler will always try to select a buffer that has not yet been used for recording (only if all buffers have already been filled it will start overwriting already recorded audio).

SUBSECTION:: Introspection

METHOD:: loopLengths
As already described buffers within SNSampler have a fixed maximum length. That means, if you write audio to them, buffers will likely not be filled completely. However SNSampler keeps track of the actual length of audio data within each buffer. A length of code::0:: means no audio has been written to the buffer (the whole buffer is filled with zeros) whereas code::1:: means the buffer is filled completely. code::0.5:: means exactly half of the buffer is filled (starting at the beginning of the buffer). The value is simply the ratio of the total buffer length by the length of the recorded audio.

returns:: an link::Classes/Array:: of link::Classes/Float::s, resembling to the number of buffers

METHOD:: usedBuffers
The buffers that have already been written audio to.

returns:: an link::Classes/Array:: of integers, denoting the buffer numbers that already contain recorded audio data

METHOD:: numChannels
(describe method here)

returns:: (describe returnvalue here)

METHOD:: init
(describe method here)

ARGUMENT:: argName
(describe argument here)

METHOD:: recorder
(describe method here)

returns:: (describe returnvalue here)

METHOD:: buffers
(describe method here)

returns:: (describe returnvalue here)

METHOD:: name
(describe method here)

returns:: (describe returnvalue here)


METHOD:: isSampling
(describe method here)

returns:: (describe returnvalue here)

METHOD:: bufLength
(describe method here)

returns:: (describe returnvalue here)

METHOD:: server
(describe method here)

returns:: (describe returnvalue here)

METHOD:: prCreateWidgets
(describe method here)

returns:: (describe returnvalue here)

METHOD:: isSetUp
(describe method here)

returns:: (describe returnvalue here)

METHOD:: inBus
(describe method here)

returns:: (describe returnvalue here)

METHOD:: setInputCompressor
(describe method here)

ARGUMENT:: thresh
(describe argument here)

ARGUMENT:: slopeBelow
(describe argument here)

ARGUMENT:: slopeAbove
(describe argument here)

ARGUMENT:: clampTime
(describe argument here)

ARGUMENT:: relaxTime
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: numBuffers
(describe method here)

returns:: (describe returnvalue here)


EXAMPLES::

code::
(some example code)
::
