TITLE:: SNSampler
summary:: A classic sampler that lets you sample sequences of sounds up to a specified length.
categories:: SNSampler
related:: Classes/SNSamplePlayer, Classes/AbstractSNSampler, Classes/CVCenter

DESCRIPTION::
An SNSampler lets you record sequences of sound up to a specified length. When you instantiate a new SNSampler an array of consecutive empty buffers of equal length will be created. The length of these buffers determines how long the sequences emphasis::can:: be. The actual sampling is started be executing the link::#-sample:: method with a boolean argument code::true::. Again executing the same method with an argument code::false::. The length of the recorde sound will be stored in a variable link::#-loopLengths:: which stores the lengths of of all currently recorded sequences in values between code::0:: and code::1:: (code::1:: represents the longest possible sequence).

CLASSMETHODS::

METHOD:: new
Create a new SNSampler instance.

ARGUMENT:: name
Optional - a link::Classes/String:: or a link::Classes/Symbol:: denoting the name for the new instance. If not given this will default to code::\sampler::.

ARGUMENT:: numBuffers
Optional - a link::Classes/Integer:: denoting the number of consecutive buffers to be allocated. If not given this will default to code::5::.

ARGUMENT:: bufLength
Optional - the lengths of the allocated (audio) link::Classes/Buffer::s in seconds. If not given this will default to code::60::.

ARGUMENT:: numChannels
Optional - the number of channels for each buffer. If not given this will default to code::1::.

ARGUMENT:: server
Optional - the link::Classes/Server:: on which to allocate the audio buffers. If not given this buffers will be allocated on code::Server.default::.

ARGUMENT:: touchOSC
Optional - a link::Classes/NetAddr:: under which an installation of the popular TouchOSC OSC controller is running.
NOTE:: The address will be used to send feedback to TouchOSC, so you emphasis::must:: provide the port under which TouchOSC expects to emphasis::receive:: OSC messages! Also, some of the widgets in CVCenter will automatically be connected, based on the IP address provided with the NetAddress. For this to work properly all elements in the TouchOSC interface (provided as layout file with SNSampler) need to be normalized, i.e. their output range must be 0.0-1.0.::

ARGUMENT:: touchOSCPanel
Optional - TouchOSC's user interface can be organized in a number of panels. Panels are numbered, beginning from 1. This is also reflected in TouchOSC's commandname structure. E.g. code::/1/toggle:: could be a toggle button on TouchOSC's first panel. If not given this will default to code::1::.

returns:: an SNSampler

METHOD:: all

returns:: an link::Classes/Event::, holding all current SNSampler instances.

INSTANCEMETHODS::

METHOD:: setupSampler
Before you can actually use the SNSampler instance you must specify the input bus and (probably) a procedure to be executed when sampling is done. Usually you will want to play the buffer that you've just recorded. This procedure should go into code::doneAction::.

ARGUMENT:: in
An link::Classes/Integer::, denoting the input bus. If not given this will default to code::0::.

ARGUMENT:: doneAction
A link::Classes/Function:: denoting the action that should be taken after sampling has been finished.

METHOD:: recBufnum
Set the link::Classes/Buffer#-bufnum#buffer number:: for the next sample or get the current one (respectively, the one used for the last recording). Incoming sound will be recorded to the buffer denoted by this value. It usually should not be necessary to set the buffer number explicitly - the sampler knows which buffers audio has already been written to and will, as long as empty buffers are still available, automatically choose an empty buffer.

ARGUMENT:: bufnum
An link::Classes/Integer:: denoting the bufnum.

METHOD:: inBus
Set or get the input bus for the sampler. This expects an link::Classes/Integer:: or a whole-numbered link::Classes/Float::.

ARGUMENT:: in
An link::Classes/Integer::, denoting the bus from which to read incoming audio.

METHOD:: sample
Start or stop sampling. The buffer to which the sampled audio will be written to is either determined by link::#-setBufnum:: or, if that method has not been called in advance, the next buffer number. Sampling will usually start at the lowest buffer number in the array of consecutive buffers that have been allocated in link::#-setupSampler:: or, if link::#-randomBufferSelect:: has been set to code::true::, at a random buffer number.
NOTE:: Calling code::sample(false):: will automatically advance the buffer number for the next recording. Hence, if you want to play back the recorded audio after calling code::sample(false)::, rather use link::#-lastBufnum:: than link::#-recBufnum::. (see example at the bottom for a minimal playback setup).::

ARGUMENT:: bool
A link::Classes/Boolean:: determining whether sampling should be started or stopped.

ARGUMENT:: bufnum
A link::Classes/Integer::, denoting the link::Classes/Buffer#-bufnum#bufnum:: to which audio shall be recorded. If not provided the sampler will either write to the next available bufnum or use a random bufnum if link::#-randomBufferSelect:: has been set to code::true::.

METHOD:: scope
Open a link::Classes/Stethoscope::, displaying the currently recorded audio. This method will be called automatically when calling link::-setupSampler:: but can be called anytime to recreate the stethoscope e.g. if it has been closed accidently.

METHOD:: reset
Reset one or all buffers. Recorded audio will be reset to zero, the link::#-loopLengths:: will be reset and, if given, code::doneAction:: will be executed.

ARGUMENT:: index
An link::Classes/Integer::, denoting the buffer number that should be reset.

ARGUMENT:: doneAction
A link::Classes/Function:: that will be executed upon reseting the buffer(s)

METHOD:: quit
Quit the sampler and free all resources except CVWidgets. After calling this method a new SNSampler of the same name can be initialized. CVWidgets created for the old SNSampler will still work with the new one.

SUBSECTION:: Instance variables - getters and setters

METHOD:: doneAction
An action to be executed immediately after recording audio has been finished. This could e.g. be some synth that plays back the recorded audio but can be anything. The code::doneAction:: must be given as a link::Classes/Function::.

METHOD:: touchOSC
Set the link::Classes/NetAddr:: under which an installation of TouchOSC will be communicating with the sampler.
NOTE:: The port given in the NetAddr will be the port under which TouchOSC is emphasis::listening:: to OSC messages coming from SuperCollider!::

METHOD:: touchOSCPanel
TouchOSC's graphical user interface is typically organized in panels. A toggle button on the first panel may be addressed through the following command name: code::/1/toggle1::. The code::touchOSCPanel:: should allow you to specify the panel under which buttons connected to the SNSampler live.

METHOD:: buffersPanel
A page in a TouchOSC GUI that is used select pre-recorded soundfiles. Default: code::4::

METHOD:: randomBufferSelect
Determine whether the next buffer for audio recording should be selected randomly. Even if this is set to code::true:: SNSampler will always try to select a buffer that has not yet been used for recording (only if all buffers have already been filled it will start overwriting already recorded audio).

SUBSECTION:: Introspection

METHOD:: recorder
The internal link::Classes/NodeProxy:: that is used to read and record incoming audio.

returns:: a link::Classes/NodeProxy::

METHOD:: loopLengths
As already described buffers within SNSampler have a fixed maximum length. That means, if you write audio to them, buffers will likely not be filled completely. However SNSampler keeps track of the actual length of audio data within each buffer. A length of code::0:: means no audio has been written to the buffer (the whole buffer is filled with zeros) whereas code::1:: means the buffer is filled completely. code::0.5:: means exactly half of the buffer is filled (starting at the beginning of the buffer). The value is simply the ratio of the total buffer length by the length of the recorded audio.

returns:: an link::Classes/Array:: of link::Classes/Float::s, resembling to the number of buffers

METHOD:: usedBuffers
The buffers that have already been written audio to.

returns:: an link::Classes/Array:: of integers, denoting the buffer numbers that already contain recorded audio data

METHOD:: lastBufnum
When recording is stopped by calling link::#-sample::code::(false):: bufnum will automatically be advanced to the next usable bufnum. The variable code::lastBufnum:: will automatically return the last used bufnum, so the buffer can be played back easily (see example at the bottom).

METHOD:: numChannels
The number of channels for each Buffer allocated when initializing a new SNSampler. Allocating the buffers is done by calling link::Classes/Buffer#*allocConsecutive:: which only allows setting the same number of channels for all allocated buffers. By default this will be code::1::.

METHOD:: buffers
Returns the array of consecutive buffers, allocated when the SNSampler was initialized.

METHOD:: backupBuffers
In an link::Classes/SNSamplePlayer:: not only sounds sampled live within SNSampler can be used but also prerecorded soundfiles. If a prerecorded sound is used a buffer in the link::-buffers:: array will be replaced by that sound. The replaced buffer will be backed up in code::backupBuffers:: along with the length of the actually recorded audio in seconds under the same index as in the code::buffers:: array. Contrary to the code::buffers:: array, code::backupBuffers:: is an array of events:

code::
[
	(buffer:<buffer 1>, length:<length of recorded audio in buffer 1>),
	(buffer:<buffer 2>, length:<length of recorded audio in buffer 2>),
	...
	(buffer:<buffer N>, length:<length of recorded audio in buffer N>),
]
::

Keeping the extra information on the length of the recorded audio allows for recreating the correct specs again, if the backed up buffer is used again.

METHOD:: name
The name of the SNSampler. By default this will be code::'Sampler'::.

METHOD:: isSampling
Either code::true:: or code::false::, depending on whether the sampler is currently recording audio.

METHOD:: bufLength
The length of each buffer in the array of consecutive buffers in seconds.

METHOD:: server
The link::Classes/Server:: on which the biffer have been allocated.

METHOD:: isSetUp
Return whether the sampler has been fully set up.

SUBSECTION:: Helpers

METHOD:: setInputCompressor
The input of the sampler may be sent through a comressor before recording it - probably not necessary in many cases but it may help amplifying a very low level signal. Note that this may also create noising. The arguments follow the arguments to a link::Classes/Compander:: ugen, except for code::in::, code::control::, code::mul::, code::add:: which are omitted here.

ARGUMENT:: thresh
Ampplitude threshold. Default: code::0.5::.

ARGUMENT:: slopeBelow
Slope of applied amplitude curve if control signal amplitude is below thresh. If > 1.0, the amplitude drops off more quickly the softer the control signal gets; when the control signal is close to 0 amplitude, the output should be exactly zero -- hence, noise gating. Values < 1.0 are possible, but it means that a very low-level control signal will cause the input signal to be amplified, which would raise the noise floor. Default: code::0.03::.

ARGUMENT:: slopeAbove
Slope of applied amplitude curve if control signal amplitude is above thresh. Values < 1.0 achieve compression (louder signals are attenuated) whereas values > 1.0 expand (louder signals are made even louder). A value of 1/3 achieves a 3:1 compression. Default: code::0.15::.

ARGUMENT:: clampTime
Time (in seconds) it takes for the amplitude adjustment to kick in fully after the control signal is above thresh. Usually a small value around 10ms (0.01), often set as low as 2ms (0.002). Default: code::0.01::.

ARGUMENT:: relaxTime
Time (in seconds) for the amplitude adjustment to be released (control signal below thresh). Usually longer than clampTime; depending on the input and control signal, setting both times too short results in (possibly unwanted) artifacts. Default: code::0.23::

PRIVATE:: init, prCreateWidgets


EXAMPLES::

code::
// create a new sampler with default parameters
~sampler = SNSampler.new;

// set up sampler: boot server, create widgets in CVCenter
// doneAction can be set within setupSampler or later
(
~sampler.setupSampler(doneAction: {{
	PlayBuf.ar(
		~sampler.numChannels,
		~sampler.lastBufnum,
		doneAction: Done.freeSelf
	)
}.play });
)

// record some audio
~sampler.sample(true);

// stop recording
// recorded audio should be played back immediately
~sampler.sample(false);
::

For a more complex example have a look at link::Classes/SNSamplePlayer::.
